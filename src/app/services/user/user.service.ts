/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  LoginUserParams,
  User
} from '../../models';



type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class UserService {
  constructor(
    private http: HttpClient,
  ) {}/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */
 createUser<TData = User>(
    user: User, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createUser<TData = User>(
    user: User, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createUser<TData = User>(
    user: User, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createUser<TData = User>(
    user: User, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `https://petstore3.swagger.io/api/v3/user`,
      user,options
    );
  }
/**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */
 createUsersWithListInput<TData = User>(
    user: User[], options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createUsersWithListInput<TData = User>(
    user: User[], options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createUsersWithListInput<TData = User>(
    user: User[], options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createUsersWithListInput<TData = User>(
    user: User[], options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `https://petstore3.swagger.io/api/v3/user/createWithList`,
      user,options
    );
  }
/**
 * Log into the system.
 * @summary Logs user into the system.
 */
 loginUser<TData = string>(
    params?: LoginUserParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    loginUser<TData = string>(
    params?: LoginUserParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    loginUser<TData = string>(
    params?: LoginUserParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;loginUser<TData = string>(
    params?: LoginUserParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `https://petstore3.swagger.io/api/v3/user/login`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */
 logoutUser<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    logoutUser<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    logoutUser<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;logoutUser<TData = void>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `https://petstore3.swagger.io/api/v3/user/logout`,options
    );
  }
/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */
 getUserByName<TData = User>(
    username: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getUserByName<TData = User>(
    username: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getUserByName<TData = User>(
    username: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getUserByName<TData = User>(
    username: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `https://petstore3.swagger.io/api/v3/user/${username}`,options
    );
  }
/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */
 updateUser<TData = void>(
    username: string,
    user: User, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateUser<TData = void>(
    username: string,
    user: User, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateUser<TData = void>(
    username: string,
    user: User, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateUser<TData = void>(
    username: string,
    user: User, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `https://petstore3.swagger.io/api/v3/user/${username}`,
      user,options
    );
  }
/**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */
 deleteUser<TData = void>(
    username: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    deleteUser<TData = void>(
    username: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    deleteUser<TData = void>(
    username: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;deleteUser<TData = void>(
    username: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.delete<TData>(
      `https://petstore3.swagger.io/api/v3/user/${username}`,options
    );
  }
};

export type CreateUserClientResult = NonNullable<User>
export type CreateUsersWithListInputClientResult = NonNullable<User>
export type LoginUserClientResult = NonNullable<string>
export type LogoutUserClientResult = NonNullable<void>
export type GetUserByNameClientResult = NonNullable<User>
export type UpdateUserClientResult = NonNullable<void>
export type DeleteUserClientResult = NonNullable<void>
