/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */

import {
  UpdatePetBody,
  AddPetBody,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormParams,
  UploadFileParams,
  UploadFileBody,
  PlaceOrderBody,
  CreateUserBody,
  CreateUsersWithListInputBody,
  LoginUserParams,
  UpdateUserBody
} from './filename.schemas';

import {
  updatePet,
  addPet,
  findPetsByStatus,
  findPetsByTags,
  getPetById,
  updatePetWithForm,
  deletePet,
  uploadFile,
  getInventory,
  placeOrder,
  getOrderById,
  deleteOrder,
  createUser,
  createUsersWithListInput,
  loginUser,
  logoutUser,
  getUserByName,
  updateUser,
  deleteUser
} from './http-client';
  
/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */

export type createUserArgs = {
  bodyParams: User;
}

export const createUserHandler = async (args: createUserArgs) => {
  const res = await createUser(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */

export type createUsersWithListInputArgs = {
  bodyParams: User[];
}

export const createUsersWithListInputHandler = async (args: createUsersWithListInputArgs) => {
  const res = await createUsersWithListInput(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Log into the system.
 * @summary Logs user into the system.
 */

export type loginUserArgs = {
  queryParams: LoginUserParams;
}

export const loginUserHandler = async (args: loginUserArgs) => {
  const res = await loginUser(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */

export const logoutUserHandler = async () => {
  const res = await logoutUser();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */

export type getUserByNameArgs = {
  pathParams: {
    username: string
  };
}

export const getUserByNameHandler = async (args: getUserByNameArgs) => {
  const res = await getUserByName(args.pathParams.username);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */

export type updateUserArgs = {
  pathParams: {
    username: string
  };
  bodyParams: User;
}

export const updateUserHandler = async (args: updateUserArgs) => {
  const res = await updateUser(args.pathParams.username, args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */

export type deleteUserArgs = {
  pathParams: {
    username: string
  };
}

export const deleteUserHandler = async (args: deleteUserArgs) => {
  const res = await deleteUser(args.pathParams.username);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
