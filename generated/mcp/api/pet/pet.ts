/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */

import {
  UpdatePetBody,
  AddPetBody,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormParams,
  UploadFileParams,
  UploadFileBody,
  PlaceOrderBody,
  CreateUserBody,
  CreateUsersWithListInputBody,
  LoginUserParams,
  UpdateUserBody
} from './filename.schemas';

import {
  updatePet,
  addPet,
  findPetsByStatus,
  findPetsByTags,
  getPetById,
  updatePetWithForm,
  deletePet,
  uploadFile,
  getInventory,
  placeOrder,
  getOrderById,
  deleteOrder,
  createUser,
  createUsersWithListInput,
  loginUser,
  logoutUser,
  getUserByName,
  updateUser,
  deleteUser
} from './http-client';
  
/**
 * Update an existing pet by Id.
 * @summary Update an existing pet.
 */

export type updatePetArgs = {
  bodyParams: Pet;
}

export const updatePetHandler = async (args: updatePetArgs) => {
  const res = await updatePet(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Add a new pet to the store.
 * @summary Add a new pet to the store.
 */

export type addPetArgs = {
  bodyParams: Pet;
}

export const addPetHandler = async (args: addPetArgs) => {
  const res = await addPet(args.bodyParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Multiple status values can be provided with comma separated strings.
 * @summary Finds Pets by status.
 */

export type findPetsByStatusArgs = {
  queryParams: FindPetsByStatusParams;
}

export const findPetsByStatusHandler = async (args: findPetsByStatusArgs) => {
  const res = await findPetsByStatus(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags.
 */

export type findPetsByTagsArgs = {
  queryParams: FindPetsByTagsParams;
}

export const findPetsByTagsHandler = async (args: findPetsByTagsArgs) => {
  const res = await findPetsByTags(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Returns a single pet.
 * @summary Find pet by ID.
 */

export type getPetByIdArgs = {
  pathParams: {
    petId: number
  };
}

export const getPetByIdHandler = async (args: getPetByIdArgs) => {
  const res = await getPetById(args.pathParams.petId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Updates a pet resource based on the form data.
 * @summary Updates a pet in the store with form data.
 */

export type updatePetWithFormArgs = {
  pathParams: {
    petId: number
  };
  queryParams: UpdatePetWithFormParams;
}

export const updatePetWithFormHandler = async (args: updatePetWithFormArgs) => {
  const res = await updatePetWithForm(args.pathParams.petId, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Delete a pet.
 * @summary Deletes a pet.
 */

export type deletePetArgs = {
  pathParams: {
    petId: number
  };
}

export const deletePetHandler = async (args: deletePetArgs) => {
  const res = await deletePet(args.pathParams.petId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
/**
 * Upload image of the pet.
 * @summary Uploads an image.
 */

export type uploadFileArgs = {
  pathParams: {
    petId: number
  };
  queryParams: UploadFileParams;
  bodyParams: Blob;
}

export const uploadFileHandler = async (args: uploadFileArgs) => {
  const res = await uploadFile(args.pathParams.petId, args.bodyParams, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
