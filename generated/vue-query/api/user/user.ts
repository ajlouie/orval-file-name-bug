/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  LoginUserParams,
  User
} from '../swaggerPetstoreOpenAPI30.schemas';





/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */
export const createUser = (
    user: MaybeRef<User>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    user = unref(user);
    
    return axios.post(
      `https://petstore3.swagger.io/api/v3/user`,
      user,options
    );
  }



export const getCreateUserMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext> => {

const mutationKey = ['createUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  createUser(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
    export type CreateUserMutationBody = User
    export type CreateUserMutationError = AxiosError<void>

    /**
 * @summary Create user.
 */
export const useCreateUser = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError,{data: User}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationReturnType<
        Awaited<ReturnType<typeof createUser>>,
        TError,
        {data: User},
        TContext
      > => {

      const mutationOptions = getCreateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */
export const createUsersWithListInput = (
    user: MaybeRef<User[]>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    user = unref(user);
    
    return axios.post(
      `https://petstore3.swagger.io/api/v3/user/createWithList`,
      user,options
    );
  }



export const getCreateUsersWithListInputMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext> => {

const mutationKey = ['createUsersWithListInput'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUsersWithListInput>>, {data: User[]}> = (props) => {
          const {data} = props ?? {};

          return  createUsersWithListInput(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUsersWithListInputMutationResult = NonNullable<Awaited<ReturnType<typeof createUsersWithListInput>>>
    export type CreateUsersWithListInputMutationBody = User[]
    export type CreateUsersWithListInputMutationError = AxiosError<void>

    /**
 * @summary Creates list of users with given input array.
 */
export const useCreateUsersWithListInput = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUsersWithListInput>>, TError,{data: User[]}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationReturnType<
        Awaited<ReturnType<typeof createUsersWithListInput>>,
        TError,
        {data: User[]},
        TContext
      > => {

      const mutationOptions = getCreateUsersWithListInputMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Log into the system.
 * @summary Logs user into the system.
 */
export const loginUser = (
    params?: MaybeRef<LoginUserParams>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    params = unref(params);
    
    return axios.get(
      `https://petstore3.swagger.io/api/v3/user/login`,{
    ...options,
        params: {...unref(params), ...options?.params},}
    );
  }


export const getLoginUserQueryKey = (params?: MaybeRef<LoginUserParams>,) => {
    return ['https:','petstore3.swagger.io','api','v3','user','login', ...(params ? [params]: [])] as const;
    }

    
export const getLoginUserQueryOptions = <TData = Awaited<ReturnType<typeof loginUser>>, TError = AxiosError<void>>(params?: MaybeRef<LoginUserParams>, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getLoginUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof loginUser>>> = ({ signal }) => loginUser(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData> 
}

export type LoginUserQueryResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserQueryError = AxiosError<void>


/**
 * @summary Logs user into the system.
 */

export function useLoginUser<TData = Awaited<ReturnType<typeof loginUser>>, TError = AxiosError<void>>(
 params?: MaybeRef<LoginUserParams>, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof loginUser>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getLoginUserQueryOptions(params,options)

  const query = useQuery(queryOptions ) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}



/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */
export const logoutUser = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `https://petstore3.swagger.io/api/v3/user/logout`,options
    );
  }


export const getLogoutUserQueryKey = () => {
    return ['https:','petstore3.swagger.io','api','v3','user','logout'] as const;
    }

    
export const getLogoutUserQueryOptions = <TData = Awaited<ReturnType<typeof logoutUser>>, TError = AxiosError<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getLogoutUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof logoutUser>>> = ({ signal }) => logoutUser({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData> 
}

export type LogoutUserQueryResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>
export type LogoutUserQueryError = AxiosError<void>


/**
 * @summary Logs out current logged in user session.
 */

export function useLogoutUser<TData = Awaited<ReturnType<typeof logoutUser>>, TError = AxiosError<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof logoutUser>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getLogoutUserQueryOptions(options)

  const query = useQuery(queryOptions ) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}



/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */
export const getUserByName = (
    username: MaybeRef<string>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    username = unref(username);
    
    return axios.get(
      `https://petstore3.swagger.io/api/v3/user/${username}`,options
    );
  }


export const getGetUserByNameQueryKey = (username: MaybeRef<string>,) => {
    return ['https:','petstore3.swagger.io','api','v3','user',username] as const;
    }

    
export const getGetUserByNameQueryOptions = <TData = Awaited<ReturnType<typeof getUserByName>>, TError = AxiosError<void>>(username: MaybeRef<string>, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  getGetUserByNameQueryKey(username);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({ signal }) => getUserByName(username, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(username))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData> 
}

export type GetUserByNameQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByName>>>
export type GetUserByNameQueryError = AxiosError<void>


/**
 * @summary Get user by user name.
 */

export function useGetUserByName<TData = Awaited<ReturnType<typeof getUserByName>>, TError = AxiosError<void>>(
 username: MaybeRef<string>, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserByName>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserByNameQueryOptions(username,options)

  const query = useQuery(queryOptions ) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}



/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */
export const updateUser = (
    username: MaybeRef<string>,
    user: MaybeRef<User>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    username = unref(username);
user = unref(user);
    
    return axios.put(
      `https://petstore3.swagger.io/api/v3/user/${username}`,
      user,options
    );
  }



export const getUpdateUserMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext> => {

const mutationKey = ['updateUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {username: string;data: User}> = (props) => {
          const {username,data} = props ?? {};

          return  updateUser(username,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = User
    export type UpdateUserMutationError = AxiosError<void>

    /**
 * @summary Update user resource.
 */
export const useUpdateUser = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{username: string;data: User}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationReturnType<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {username: string;data: User},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */
export const deleteUser = (
    username: MaybeRef<string>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    username = unref(username);
    
    return axios.delete(
      `https://petstore3.swagger.io/api/v3/user/${username}`,options
    );
  }



export const getDeleteUserMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext> => {

const mutationKey = ['deleteUser'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, {username: string}> = (props) => {
          const {username} = props ?? {};

          return  deleteUser(username,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
    
    export type DeleteUserMutationError = AxiosError<void>

    /**
 * @summary Delete user resource.
 */
export const useDeleteUser = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError,{username: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationReturnType<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        {username: string},
        TContext
      > => {

      const mutationOptions = getDeleteUserMutationOptions(options);

      return useMutation(mutationOptions );
    }
    