/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  GetInventory200,
  Order
} from '../swaggerPetstoreOpenAPI30.schemas';



  
  
  
/**
 * Returns a map of status codes to quantities.
 * @summary Returns pet inventories by status.
 */
export const getInventory = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetInventory200>> => {
    return axios.get(
      `https://petstore3.swagger.io/api/v3/store/inventory`,options
    );
  }



export const getGetInventoryKey = () => [`https://petstore3.swagger.io/api/v3/store/inventory`] as const;

export type GetInventoryQueryResult = NonNullable<Awaited<ReturnType<typeof getInventory>>>
export type GetInventoryQueryError = AxiosError<void>

/**
 * @summary Returns pet inventories by status.
 */
export const useGetInventory = <TError = AxiosError<void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getInventory>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetInventoryKey() : null);
  const swrFn = () => getInventory(axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Place a new order in the store.
 * @summary Place an order for a pet.
 */
export const placeOrder = (
    order: Order, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    return axios.post(
      `https://petstore3.swagger.io/api/v3/store/order`,
      order,options
    );
  }



export const getPlaceOrderMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: Order }): Promise<AxiosResponse<Order>> => {
    return placeOrder(arg, options);
  }
}
export const getPlaceOrderMutationKey = () => [`https://petstore3.swagger.io/api/v3/store/order`] as const;

export type PlaceOrderMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrder>>>
export type PlaceOrderMutationError = AxiosError<void>

/**
 * @summary Place an order for a pet.
 */
export const usePlaceOrder = <TError = AxiosError<void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof placeOrder>>, TError, Key, Order, Awaited<ReturnType<typeof placeOrder>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPlaceOrderMutationKey();
  const swrFn = getPlaceOrderMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID.
 */
export const getOrderById = (
    orderId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Order>> => {
    return axios.get(
      `https://petstore3.swagger.io/api/v3/store/order/${orderId}`,options
    );
  }



export const getGetOrderByIdKey = (orderId: number,) => [`https://petstore3.swagger.io/api/v3/store/order/${orderId}`] as const;

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = AxiosError<void>

/**
 * @summary Find purchase order by ID.
 */
export const useGetOrderById = <TError = AxiosError<void>>(
  orderId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getOrderById>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(orderId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetOrderByIdKey(orderId) : null);
  const swrFn = () => getOrderById(orderId, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 * @summary Delete purchase order by identifier.
 */
export const deleteOrder = (
    orderId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://petstore3.swagger.io/api/v3/store/order/${orderId}`,options
    );
  }



export const getDeleteOrderMutationFetcher = (orderId: number, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return deleteOrder(orderId, options);
  }
}
export const getDeleteOrderMutationKey = (orderId: number,) => [`https://petstore3.swagger.io/api/v3/store/order/${orderId}`] as const;

export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>
export type DeleteOrderMutationError = AxiosError<void>

/**
 * @summary Delete purchase order by identifier.
 */
export const useDeleteOrder = <TError = AxiosError<void>>(
  orderId: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteOrder>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteOrder>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteOrderMutationKey(orderId);
  const swrFn = getDeleteOrderMutationFetcher(orderId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
