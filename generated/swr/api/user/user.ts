/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  LoginUserParams,
  User
} from '../swaggerPetstoreOpenAPI30.schemas';



  
  
  
/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */
export const createUser = (
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.post(
      `https://petstore3.swagger.io/api/v3/user`,
      user,options
    );
  }



export const getCreateUserMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: User }): Promise<AxiosResponse<User>> => {
    return createUser(arg, options);
  }
}
export const getCreateUserMutationKey = () => [`https://petstore3.swagger.io/api/v3/user`] as const;

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type CreateUserMutationError = AxiosError<void>

/**
 * @summary Create user.
 */
export const useCreateUser = <TError = AxiosError<void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createUser>>, TError, Key, User, Awaited<ReturnType<typeof createUser>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateUserMutationKey();
  const swrFn = getCreateUserMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */
export const createUsersWithListInput = (
    user: User[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.post(
      `https://petstore3.swagger.io/api/v3/user/createWithList`,
      user,options
    );
  }



export const getCreateUsersWithListInputMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: User[] }): Promise<AxiosResponse<User>> => {
    return createUsersWithListInput(arg, options);
  }
}
export const getCreateUsersWithListInputMutationKey = () => [`https://petstore3.swagger.io/api/v3/user/createWithList`] as const;

export type CreateUsersWithListInputMutationResult = NonNullable<Awaited<ReturnType<typeof createUsersWithListInput>>>
export type CreateUsersWithListInputMutationError = AxiosError<void>

/**
 * @summary Creates list of users with given input array.
 */
export const useCreateUsersWithListInput = <TError = AxiosError<void>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createUsersWithListInput>>, TError, Key, User[], Awaited<ReturnType<typeof createUsersWithListInput>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateUsersWithListInputMutationKey();
  const swrFn = getCreateUsersWithListInputMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Log into the system.
 * @summary Logs user into the system.
 */
export const loginUser = (
    params?: LoginUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    return axios.get(
      `https://petstore3.swagger.io/api/v3/user/login`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getLoginUserKey = (params?: LoginUserParams,) => [`https://petstore3.swagger.io/api/v3/user/login`, ...(params ? [params]: [])] as const;

export type LoginUserQueryResult = NonNullable<Awaited<ReturnType<typeof loginUser>>>
export type LoginUserQueryError = AxiosError<void>

/**
 * @summary Logs user into the system.
 */
export const useLoginUser = <TError = AxiosError<void>>(
  params?: LoginUserParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof loginUser>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLoginUserKey(params) : null);
  const swrFn = () => loginUser(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */
export const logoutUser = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `https://petstore3.swagger.io/api/v3/user/logout`,options
    );
  }



export const getLogoutUserKey = () => [`https://petstore3.swagger.io/api/v3/user/logout`] as const;

export type LogoutUserQueryResult = NonNullable<Awaited<ReturnType<typeof logoutUser>>>
export type LogoutUserQueryError = AxiosError<void>

/**
 * @summary Logs out current logged in user session.
 */
export const useLogoutUser = <TError = AxiosError<void>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof logoutUser>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getLogoutUserKey() : null);
  const swrFn = () => logoutUser(axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */
export const getUserByName = (
    username: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.get(
      `https://petstore3.swagger.io/api/v3/user/${username}`,options
    );
  }



export const getGetUserByNameKey = (username: string,) => [`https://petstore3.swagger.io/api/v3/user/${username}`] as const;

export type GetUserByNameQueryResult = NonNullable<Awaited<ReturnType<typeof getUserByName>>>
export type GetUserByNameQueryError = AxiosError<void>

/**
 * @summary Get user by user name.
 */
export const useGetUserByName = <TError = AxiosError<void>>(
  username: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUserByName>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(username)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUserByNameKey(username) : null);
  const swrFn = () => getUserByName(username, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */
export const updateUser = (
    username: string,
    user: User, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://petstore3.swagger.io/api/v3/user/${username}`,
      user,options
    );
  }



export const getUpdateUserMutationFetcher = (username: string, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: User }): Promise<AxiosResponse<void>> => {
    return updateUser(username, arg, options);
  }
}
export const getUpdateUserMutationKey = (username: string,) => [`https://petstore3.swagger.io/api/v3/user/${username}`] as const;

export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
export type UpdateUserMutationError = AxiosError<void>

/**
 * @summary Update user resource.
 */
export const useUpdateUser = <TError = AxiosError<void>>(
  username: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof updateUser>>, TError, Key, User, Awaited<ReturnType<typeof updateUser>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUpdateUserMutationKey(username);
  const swrFn = getUpdateUserMutationFetcher(username, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */
export const deleteUser = (
    username: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://petstore3.swagger.io/api/v3/user/${username}`,options
    );
  }



export const getDeleteUserMutationFetcher = (username: string, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return deleteUser(username, options);
  }
}
export const getDeleteUserMutationKey = (username: string,) => [`https://petstore3.swagger.io/api/v3/user/${username}`] as const;

export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
export type DeleteUserMutationError = AxiosError<void>

/**
 * @summary Delete user resource.
 */
export const useDeleteUser = <TError = AxiosError<void>>(
  username: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteUser>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteUser>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteUserMutationKey(username);
  const swrFn = getDeleteUserMutationFetcher(username, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
