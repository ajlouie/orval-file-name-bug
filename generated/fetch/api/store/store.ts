/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import type {
  GetInventory200,
  Order
} from '../swaggerPetstoreOpenAPI30.schemas';



export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;

/**
 * Returns a map of status codes to quantities.
 * @summary Returns pet inventories by status.
 */
export type getInventoryResponse200 = {
  data: GetInventory200
  status: 200
}

export type getInventoryResponseDefault = {
  data: void
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getInventoryResponseComposite = getInventoryResponse200 | getInventoryResponseDefault;
    
export type getInventoryResponse = getInventoryResponseComposite & {
  headers: Headers;
}

export const getGetInventoryUrl = () => {


  

  return `https://petstore3.swagger.io/api/v3/store/inventory`
}

export const getInventory = async ( options?: RequestInit): Promise<getInventoryResponse> => {
  
  const res = await fetch(getGetInventoryUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getInventoryResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getInventoryResponse
}


/**
 * Place a new order in the store.
 * @summary Place an order for a pet.
 */
export type placeOrderResponse200 = {
  data: Order
  status: 200
}

export type placeOrderResponse400 = {
  data: void
  status: 400
}
    
export type placeOrderResponseComposite = placeOrderResponse200 | placeOrderResponse400;
    
export type placeOrderResponse = placeOrderResponseComposite & {
  headers: Headers;
}

export const getPlaceOrderUrl = () => {


  

  return `https://petstore3.swagger.io/api/v3/store/order`
}

export const placeOrder = async (order: Order, options?: RequestInit): Promise<placeOrderResponse> => {
  
  const res = await fetch(getPlaceOrderUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      order,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: placeOrderResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as placeOrderResponse
}


/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID.
 */
export type getOrderByIdResponse200 = {
  data: Order
  status: 200
}

export type getOrderByIdResponse400 = {
  data: void
  status: 400
}
    
export type getOrderByIdResponseComposite = getOrderByIdResponse200 | getOrderByIdResponse400;
    
export type getOrderByIdResponse = getOrderByIdResponseComposite & {
  headers: Headers;
}

export const getGetOrderByIdUrl = (orderId: number,) => {


  

  return `https://petstore3.swagger.io/api/v3/store/order/${orderId}`
}

export const getOrderById = async (orderId: number, options?: RequestInit): Promise<getOrderByIdResponse> => {
  
  const res = await fetch(getGetOrderByIdUrl(orderId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getOrderByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getOrderByIdResponse
}


/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 * @summary Delete purchase order by identifier.
 */
export type deleteOrderResponse200 = {
  data: void
  status: 200
}

export type deleteOrderResponse400 = {
  data: void
  status: 400
}
    
export type deleteOrderResponseComposite = deleteOrderResponse200 | deleteOrderResponse400;
    
export type deleteOrderResponse = deleteOrderResponseComposite & {
  headers: Headers;
}

export const getDeleteOrderUrl = (orderId: number,) => {


  

  return `https://petstore3.swagger.io/api/v3/store/order/${orderId}`
}

export const deleteOrder = async (orderId: number, options?: RequestInit): Promise<deleteOrderResponse> => {
  
  const res = await fetch(getDeleteOrderUrl(orderId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteOrderResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteOrderResponse
}


