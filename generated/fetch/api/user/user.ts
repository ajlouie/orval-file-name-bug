/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import type {
  LoginUserParams,
  User
} from '../swaggerPetstoreOpenAPI30.schemas';



export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;

/**
 * This can only be done by the logged in user.
 * @summary Create user.
 */
export type createUserResponse200 = {
  data: User
  status: 200
}

export type createUserResponseDefault = {
  data: void
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type createUserResponseComposite = createUserResponse200 | createUserResponseDefault;
    
export type createUserResponse = createUserResponseComposite & {
  headers: Headers;
}

export const getCreateUserUrl = () => {


  

  return `https://petstore3.swagger.io/api/v3/user`
}

export const createUser = async (user: User, options?: RequestInit): Promise<createUserResponse> => {
  
  const res = await fetch(getCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createUserResponse
}


/**
 * Creates list of users with given input array.
 * @summary Creates list of users with given input array.
 */
export type createUsersWithListInputResponse200 = {
  data: User
  status: 200
}

export type createUsersWithListInputResponseDefault = {
  data: void
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type createUsersWithListInputResponseComposite = createUsersWithListInputResponse200 | createUsersWithListInputResponseDefault;
    
export type createUsersWithListInputResponse = createUsersWithListInputResponseComposite & {
  headers: Headers;
}

export const getCreateUsersWithListInputUrl = () => {


  

  return `https://petstore3.swagger.io/api/v3/user/createWithList`
}

export const createUsersWithListInput = async (user: User[], options?: RequestInit): Promise<createUsersWithListInputResponse> => {
  
  const res = await fetch(getCreateUsersWithListInputUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createUsersWithListInputResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createUsersWithListInputResponse
}


/**
 * Log into the system.
 * @summary Logs user into the system.
 */
export type loginUserResponse200 = {
  data: string
  status: 200
}

export type loginUserResponse400 = {
  data: void
  status: 400
}
    
export type loginUserResponseComposite = loginUserResponse200 | loginUserResponse400;
    
export type loginUserResponse = loginUserResponseComposite & {
  headers: Headers;
}

export const getLoginUserUrl = (params?: LoginUserParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://petstore3.swagger.io/api/v3/user/login?${stringifiedParams}` : `https://petstore3.swagger.io/api/v3/user/login`
}

export const loginUser = async (params?: LoginUserParams, options?: RequestInit): Promise<loginUserResponse> => {
  
  const res = await fetch(getLoginUserUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: loginUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as loginUserResponse
}


/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */
export type logoutUserResponse200 = {
  data: void
  status: 200
}

export type logoutUserResponseDefault = {
  data: void
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type logoutUserResponseComposite = logoutUserResponse200 | logoutUserResponseDefault;
    
export type logoutUserResponse = logoutUserResponseComposite & {
  headers: Headers;
}

export const getLogoutUserUrl = () => {


  

  return `https://petstore3.swagger.io/api/v3/user/logout`
}

export const logoutUser = async ( options?: RequestInit): Promise<logoutUserResponse> => {
  
  const res = await fetch(getLogoutUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: logoutUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as logoutUserResponse
}


/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */
export type getUserByNameResponse200 = {
  data: User
  status: 200
}

export type getUserByNameResponse400 = {
  data: void
  status: 400
}
    
export type getUserByNameResponseComposite = getUserByNameResponse200 | getUserByNameResponse400;
    
export type getUserByNameResponse = getUserByNameResponseComposite & {
  headers: Headers;
}

export const getGetUserByNameUrl = (username: string,) => {


  

  return `https://petstore3.swagger.io/api/v3/user/${username}`
}

export const getUserByName = async (username: string, options?: RequestInit): Promise<getUserByNameResponse> => {
  
  const res = await fetch(getGetUserByNameUrl(username),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getUserByNameResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getUserByNameResponse
}


/**
 * This can only be done by the logged in user.
 * @summary Update user resource.
 */
export type updateUserResponse200 = {
  data: void
  status: 200
}

export type updateUserResponse400 = {
  data: void
  status: 400
}
    
export type updateUserResponseComposite = updateUserResponse200 | updateUserResponse400;
    
export type updateUserResponse = updateUserResponseComposite & {
  headers: Headers;
}

export const getUpdateUserUrl = (username: string,) => {


  

  return `https://petstore3.swagger.io/api/v3/user/${username}`
}

export const updateUser = async (username: string,
    user: User, options?: RequestInit): Promise<updateUserResponse> => {
  
  const res = await fetch(getUpdateUserUrl(username),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updateUserResponse
}


/**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */
export type deleteUserResponse200 = {
  data: void
  status: 200
}

export type deleteUserResponse400 = {
  data: void
  status: 400
}
    
export type deleteUserResponseComposite = deleteUserResponse200 | deleteUserResponse400;
    
export type deleteUserResponse = deleteUserResponseComposite & {
  headers: Headers;
}

export const getDeleteUserUrl = (username: string,) => {


  

  return `https://petstore3.swagger.io/api/v3/user/${username}`
}

export const deleteUser = async (username: string, options?: RequestInit): Promise<deleteUserResponse> => {
  
  const res = await fetch(getDeleteUserUrl(username),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteUserResponse
}


